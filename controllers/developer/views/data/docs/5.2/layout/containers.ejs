<!DOCTYPE html>
<html>
  <head>
    <!-- meta(charset='utf-8')-->
    <!-- title: !=title-->
    <style>
      <!--include ./node_modules/primer-css/build/build.css-->/*

github.com style (c) Vasily Polovnyov <vast@whiteants.net>

*/

.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  color: #333;
  background: #f8f8f8;
}

.hljs-comment,
.hljs-quote {
  color: #998;
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag,
.hljs-subst {
  color: #333;
  font-weight: bold;
}

.hljs-number,
.hljs-literal,
.hljs-variable,
.hljs-template-variable,
.hljs-tag .hljs-attr {
  color: #008080;
}

.hljs-string,
.hljs-doctag {
  color: #d14;
}

.hljs-title,
.hljs-section,
.hljs-selector-id {
  color: #900;
  font-weight: bold;
}

.hljs-subst {
  font-weight: normal;
}

.hljs-type,
.hljs-class .hljs-title {
  color: #458;
  font-weight: bold;
}

.hljs-tag,
.hljs-name,
.hljs-attribute {
  color: #000080;
  font-weight: normal;
}

.hljs-regexp,
.hljs-link {
  color: #009926;
}

.hljs-symbol,
.hljs-bullet {
  color: #990073;
}

.hljs-built_in,
.hljs-builtin-name {
  color: #0086b3;
}

.hljs-meta {
  color: #999;
  font-weight: bold;
}

.hljs-deletion {
  background: #fdd;
}

.hljs-addition {
  background: #dfd;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}

    </style>
  </head>
  <body>
    <div class="container">
      <div class="markdown-body"><hr>
<h2>layout: docs
title: Containers
description: Containers are a fundamental building block of Bootstrap that contain, pad, and align your content within a given device or viewport.
group: layout
toc: true</h2>
<h2>How they work</h2>
<p>Containers are the most basic layout element in Bootstrap and are <strong>required when using our default grid system</strong>. Containers are used to contain, pad, and (sometimes) center the content within them. While containers <em>can</em> be nested, most layouts do not require a nested container.</p>
<p>Bootstrap comes with three different containers:</p>
<ul>
<li><code>.container</code>, which sets a <code>max-width</code> at each responsive breakpoint</li>
<li><code>.container-{breakpoint}</code>, which is <code>width: 100%</code> until the specified breakpoint</li>
<li><code>.container-fluid</code>, which is <code>width: 100%</code> at all breakpoints</li>
</ul>
<p>The table below illustrates how each container's <code>max-width</code> compares to the original <code>.container</code> and <code>.container-fluid</code> across each breakpoint.</p>
<p>See them in action and compare them in our [Grid example]({{&lt; docsref &quot;/examples/grid#containers&quot; &gt;}}).</p>
<p>{{&lt; bs-table &quot;table&quot; &gt;}}</p>
<table>
<thead>
<tr>
<th></th>
<th>Extra small&lt;div class=&quot;fw-normal&quot;&gt;&lt;576px&lt;/div&gt;</th>
<th>Small&lt;div class=&quot;fw-normal&quot;&gt;≥576px&lt;/div&gt;</th>
<th>Medium&lt;div class=&quot;fw-normal&quot;&gt;≥768px&lt;/div&gt;</th>
<th>Large&lt;div class=&quot;fw-normal&quot;&gt;≥992px&lt;/div&gt;</th>
<th>X-Large&lt;div class=&quot;fw-normal&quot;&gt;≥1200px&lt;/div&gt;</th>
<th>XX-Large&lt;div class=&quot;fw-normal&quot;&gt;≥1400px&lt;/div&gt;</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.container</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>540px</td>
<td>720px</td>
<td>960px</td>
<td>1140px</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-sm</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>540px</td>
<td>720px</td>
<td>960px</td>
<td>1140px</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-md</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>720px</td>
<td>960px</td>
<td>1140px</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-lg</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>960px</td>
<td>1140px</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-xl</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>1140px</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-xxl</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>1320px</td>
</tr>
<tr>
<td><code>.container-fluid</code></td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
<td>&lt;span class=&quot;text-muted&quot;&gt;100%&lt;/span&gt;</td>
</tr>
</tbody>
</table>
<p>{{&lt; /bs-table &gt;}}</p>
<h2>Default container</h2>
<p>Our default <code>.container</code> class is a responsive, fixed-width container, meaning its <code>max-width</code> changes at each breakpoint.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- Content here --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<h2>Responsive containers</h2>
<p>Responsive containers allow you to specify a class that is 100% wide until the specified breakpoint is reached, after which we apply <code>max-width</code>s for each of the higher breakpoints. For example, <code>.container-sm</code> is 100% wide to start until the <code>sm</code> breakpoint is reached, where it will scale up with <code>md</code>, <code>lg</code>, <code>xl</code>, and <code>xxl</code>.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-sm"</span>&gt;</span>100% wide until small breakpoint<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-md"</span>&gt;</span>100% wide until medium breakpoint<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-lg"</span>&gt;</span>100% wide until large breakpoint<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-xl"</span>&gt;</span>100% wide until extra large breakpoint<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-xxl"</span>&gt;</span>100% wide until extra extra large breakpoint<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<h2>Fluid containers</h2>
<p>Use <code>.container-fluid</code> for a full width container, spanning the entire width of the viewport.</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<h2>Sass</h2>
<p>As shown above, Bootstrap generates a series of predefined container classes to help you build the layouts you desire. You may customize these predefined container classes by modifying the Sass map (found in <code>_variables.scss</code>) that powers them:</p>
<p>{{&lt; scss-docs name=&quot;container-max-widths&quot; file=&quot;scss/_variables.scss&quot; &gt;}}</p>
<p>In addition to customizing the Sass, you can also create your own containers with our Sass mixin.</p>
<pre><code class="hljs scss"><span class="hljs-comment">// Source mixin</span>
<span class="hljs-keyword">@mixin</span> make-container(<span class="hljs-variable">$padding-x</span>: <span class="hljs-variable">$container-padding-x</span>) {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">padding-right</span>: <span class="hljs-variable">$padding-x</span>;
  <span class="hljs-attribute">padding-left</span>: <span class="hljs-variable">$padding-x</span>;
  <span class="hljs-attribute">margin-right</span>: auto;
  <span class="hljs-attribute">margin-left</span>: auto;
}

<span class="hljs-comment">// Usage</span>
<span class="hljs-selector-class">.custom-container</span> {
  <span class="hljs-keyword">@include</span> make-container();
}
</code></pre>
<p>For more information and examples on how to modify our Sass maps and variables, please refer to [the Sass section of the Grid documentation]({{&lt; docsref &quot;/layout/grid#sass&quot; &gt;}}).</p>

      </div>
    </div>
  </body>
</html>